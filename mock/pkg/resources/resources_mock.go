// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/resources/resources.go

// Package resources is a generated GoMock package.
package resources

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockResourcesApi is a mock of ResourcesApi interface.
type MockResourcesApi struct {
	ctrl     *gomock.Controller
	recorder *MockResourcesApiMockRecorder
}

// MockResourcesApiMockRecorder is the mock recorder for MockResourcesApi.
type MockResourcesApiMockRecorder struct {
	mock *MockResourcesApi
}

// NewMockResourcesApi creates a new mock instance.
func NewMockResourcesApi(ctrl *gomock.Controller) *MockResourcesApi {
	mock := &MockResourcesApi{ctrl: ctrl}
	mock.recorder = &MockResourcesApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourcesApi) EXPECT() *MockResourcesApiMockRecorder {
	return m.recorder
}

// GetResourceAsString mocks base method.
func (m *MockResourcesApi) GetResourceAsString(name string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceAsString", name)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetResourceAsString indicates an expected call of GetResourceAsString.
func (mr *MockResourcesApiMockRecorder) GetResourceAsString(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceAsString", reflect.TypeOf((*MockResourcesApi)(nil).GetResourceAsString), name)
}
