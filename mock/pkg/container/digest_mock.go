// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/container/digest.go

// Package container is a generated GoMock package.
package container

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	name "github.com/google/go-containerregistry/pkg/name"
	options "github.com/matthogan/zc/cmd/cn/cli/options"
)

// MockDigestApi is a mock of DigestApi interface.
type MockDigestApi struct {
	ctrl     *gomock.Controller
	recorder *MockDigestApiMockRecorder
}

// MockDigestApiMockRecorder is the mock recorder for MockDigestApi.
type MockDigestApiMockRecorder struct {
	mock *MockDigestApi
}

// NewMockDigestApi creates a new mock instance.
func NewMockDigestApi(ctrl *gomock.Controller) *MockDigestApi {
	mock := &MockDigestApi{ctrl: ctrl}
	mock.recorder = &MockDigestApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDigestApi) EXPECT() *MockDigestApiMockRecorder {
	return m.recorder
}

// GetDigestFromRegistry mocks base method.
func (m *MockDigestApi) GetDigestFromRegistry(ctx context.Context, regOpts *options.RegistryOptions, imageRef string) (*name.Digest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDigestFromRegistry", ctx, regOpts, imageRef)
	ret0, _ := ret[0].(*name.Digest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDigestFromRegistry indicates an expected call of GetDigestFromRegistry.
func (mr *MockDigestApiMockRecorder) GetDigestFromRegistry(ctx, regOpts, imageRef interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDigestFromRegistry", reflect.TypeOf((*MockDigestApi)(nil).GetDigestFromRegistry), ctx, regOpts, imageRef)
}
