// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/oci/remote/api.go

// Package remote is a generated GoMock package.
package remote

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	name "github.com/google/go-containerregistry/pkg/name"
	remote "github.com/matthogan/zc/pkg/oci/remote"
)

// MockRemoteApi is a mock of RemoteApi interface.
type MockRemoteApi struct {
	ctrl     *gomock.Controller
	recorder *MockRemoteApiMockRecorder
}

// MockRemoteApiMockRecorder is the mock recorder for MockRemoteApi.
type MockRemoteApiMockRecorder struct {
	mock *MockRemoteApi
}

// NewMockRemoteApi creates a new mock instance.
func NewMockRemoteApi(ctrl *gomock.Controller) *MockRemoteApi {
	mock := &MockRemoteApi{ctrl: ctrl}
	mock.recorder = &MockRemoteApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRemoteApi) EXPECT() *MockRemoteApiMockRecorder {
	return m.recorder
}

// ResolveDigest mocks base method.
func (m *MockRemoteApi) ResolveDigest(ref name.Reference, opts ...remote.Option) (name.Digest, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ref}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResolveDigest", varargs...)
	ret0, _ := ret[0].(name.Digest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveDigest indicates an expected call of ResolveDigest.
func (mr *MockRemoteApiMockRecorder) ResolveDigest(ref interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ref}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveDigest", reflect.TypeOf((*MockRemoteApi)(nil).ResolveDigest), varargs...)
}
